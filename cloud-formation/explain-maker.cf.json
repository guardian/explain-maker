{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description" : "Editor tool to create and update the Explainer 'atoms'",
    "Parameters" : {
        "VpcId" : {
            "Type" : "AWS::EC2::VPC::Id",
            "Description" : "VpcId of your existing Virtual Private Cloud (VPC)",
            "Default" : "vpc-381fa95d"
        },
        "PrivateSubnets" : {
            "Type" : "List<AWS::EC2::Subnet::Id>",
            "Description" : "The list of SubnetIds in your Virtual Private Cloud (VPC)",
            "Default" : "subnet-c2620fa7,subnet-2967c870,subnet-2a37bd5d"
        },
        "PublicSubnets" : {
            "Type" : "List<AWS::EC2::Subnet::Id>",
            "Description" : "The list of SubnetIds in your Virtual Private Cloud (VPC)",
            "Default" : "subnet-c3620fa6,subnet-2b37bd5c,subnet-3667c86f"
        },
        "Stack": {
            "Type": "String",
            "Description": "Applied directly as a tag",
            "Default" : "flexible"
        },
        "KeyName" : {
            "Description" : "The EC2 Key Pair to allow SSH access to the instance",
            "Type" : "AWS::EC2::KeyPair::KeyName",
            "Default" : "composer-team"
        },
        "Stage": {
            "Type" : "String",
            "AllowedValues":[ "PROD", "CODE"],
            "Description" : "Applied directly as a tag",
            "Default" : "CODE"
        },
        "ImageId": {
            "Description": "AMI ID",
            "Type": "String"
        },
        "ELBSSLCertificate": {
            "Description": "ELB SSL Certificate ARN",
            "Type": "String"
        },
        "GuardianIP": {
            "Description": "Ip range for the office",
            "Type": "String",
            "Default": "77.91.248.0/21"
        },
        "ELKKinesisStream": {
            "Description": "Kinesis stream for logging to the ELK stack",
            "Type": "String"
        },
        "ContentAtomKinesisStreamPrefix": {
            "Description": "Kinesis stream prefix (before the live/preview-CODE/PROD bit)",
            "Type": "String"
        },
        "VulnerabilityScanningSecurityGroup": {
            "Description": "Security group that grants access to the account's Vulnerability Scanner",
            "Type": "AWS::EC2::SecurityGroup::Id"
        }
    },
    "Mappings": {
        "Config":{
            "CODE":{
                "MinSize": 1,
                "MaxSize": 2,
                "DesiredCapacity": 1,
                "InstanceType": "t2.micro"
            },
            "PROD":{
                "MinSize": 3,
                "MaxSize": 6,
                "DesiredCapacity": 3,
                "InstanceType": "t2.small"
            }
        }
    },
    "Resources" : {
        "AutoScalingGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "AvailabilityZones" : { "Fn::GetAZs" : "" },
                "VPCZoneIdentifier" : { "Ref" : "PrivateSubnets" },
                "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
                "MinSize" : { "Fn::FindInMap": [ "Config", { "Ref": "Stage" }, "MinSize" ] },
                "MaxSize" : { "Fn::FindInMap": [ "Config", { "Ref": "Stage" }, "MaxSize" ] },
                "DesiredCapacity" : { "Fn::FindInMap": [ "Config", { "Ref": "Stage" }, "DesiredCapacity" ] },
                "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ],
                "HealthCheckType" : "ELB",
                "HealthCheckGracePeriod" : 300,
                "Tags" : [
                    { "Key" : "Stack", "Value" : { "Ref" : "Stack" }, "PropagateAtLaunch" : "true" },
                    { "Key" : "App", "Value" : "explain-maker", "PropagateAtLaunch" : "true" },
                    { "Key" : "Stage", "Value" : { "Ref" : "Stage" }, "PropagateAtLaunch" : "true"  }
                ]
            }
        },

        "LaunchConfig" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties" : {
                "ImageId" : { "Ref": "ImageId" },
                "SecurityGroups" : [ 
                    {
                        "Ref" : "InstanceSecurityGroup" 
                    },
                    {
                        "Ref": "SSHSecurityGroup" 
                    },
                    {
                        "Ref": "VulnerabilityScanningSecurityGroup"
                    }
                ],
                "InstanceType" : { "Fn::FindInMap": [ "Config", { "Ref": "Stage" }, "InstanceType" ] },
                "KeyName" : { "Ref" : "KeyName" },
                "IamInstanceProfile": { "Ref" : "AppInstanceProfile" },
                "UserData" : { "Fn::Base64": {
                    "Fn::Join":["\n", [
                      "#!/bin/bash -ev",
                      "/opt/features/ssh-keys/initialise-keys-and-cron-job.sh -l -b github-public-keys -t Editorial-Tools-SSHAccess || true \n",
                      "mkdir /etc/gu",
                      "aws s3 cp s3://explainer-config/application.secrets.conf /etc/gu/explainer.secrets.conf",
                        "/opt/features/native-packager/install.sh -b composer-dist -a explain-maker -t tgz -s\n"
                    ]]
                }}
            }
        },

        "AppRole" : {
            "Type" : "AWS::IAM::Role",
            "Properties":{
                "Path":"/",
                "AssumeRolePolicyDocument": {
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": { "Service": [ "ec2.amazonaws.com" ] },
                        "Action": [ "sts:AssumeRole" ]
                    }]
                },
                "Policies": [
                {
                    "PolicyName": "GithubPublicKeysPolicy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": ["s3:GetObject"],
                                "Resource": ["arn:aws:s3:::github-public-keys/*"]
                            },
                            {
                                "Effect":"Allow",
                                "Action": ["s3:ListBucket"],
                                "Resource":"arn:aws:s3:::github-public-keys"
                            }
                        ]
                    }
                },
                {
                  "PolicyName": "ExplainMakerDynamoPolicy",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [ "dynamodb:*" ],
                        "Resource": [ { "Fn::Join": [ "", [ "arn:aws:dynamodb:eu-west-1:743583969668:table/explain-maker-preview-", { "Ref": "Stage" } ] ] } ]
                      },
                        {
                            "Effect": "Allow",
                            "Action": [ "dynamodb:*" ],
                            "Resource": [ { "Fn::Join": [ "", [ "arn:aws:dynamodb:eu-west-1:743583969668:table/explain-maker-live-", { "Ref": "Stage" } ] ] } ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [ "dynamodb:*" ],
                            "Resource": [ { "Fn::Join": [ "", [ "arn:aws:dynamodb:eu-west-1:743583969668:table/explain-maker-workflow-data-", { "Ref": "Stage" } ] ] } ]
                        }
                    ]
                  }
                },
                {
                    "PolicyName": "ExplainMakerReadELKKinesisPolicy",
                    "PolicyDocument": {
                        "Statement": [
                            {
                                "Resource": {
                                    "Fn::Join": [ "", ["arn:aws:kinesis:eu-west-1:743583969668:stream/", { "Ref" :"ELKKinesisStream"}]]
                                },
                                "Action": [
                                    "kinesis:PutRecord",
                                    "kinesis:DescribeStream"
                                ],
                                "Effect": "Allow"
                            }
                        ]
                    }
                },
                {
                    "PolicyName": "ExplainMakerPushMetrics",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement":[{
                            "Effect":"Allow",
                            "Action":["cloudwatch:PutMetricData"],
                            "Resource":"*"
                        }
                        ]
                    }
                },
                {
                    "PolicyName": "ExplainMakerFetchConfig",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": ["s3:GetObject"],
                                "Resource": ["arn:aws:s3:::explainer-config/*"]
                            },
                            {
                                "Effect":"Allow",
                                "Action": ["s3:ListBucket"],
                                "Resource":"arn:aws:s3:::explainer-config"
                            }
                        ]
                    }
                },
                {
                    "PolicyName": "ExplainMakerGetDistributablesPolicy",
                    "PolicyDocument": {
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": [ "s3:GetObject" ],
                                "Resource": [ "arn:aws:s3:::composer-dist/*" ]
                            }
                        ]
                    }
                },
                {
                        "PolicyName": "ExplainMakerDescribeEC2Policy",
                        "PolicyDocument": {
                            "Statement": [ {
                                "Action": ["EC2:Describe*"],
                                "Effect": "Allow",
                                "Resource":"*"
                            }]
                        }
                },
                {
                    "PolicyName": "ExplainMakerContentAtomKinesisPolicy",
                    "PolicyDocument": {
                        "Statement": [ {
                            "Action": [ "kinesis:PutRecord", "kinesis:PutRecords", "kinesis:DescribeStream" ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [":", [
                                    "arn:aws:kinesis",
                                    {"Ref": "AWS::Region"},
                                    {"Ref": "AWS::AccountId"},
                                    {"Fn::Join": ["", ["stream/",
                                        {"Fn::Join": ["", [{"Ref": "ContentAtomKinesisStreamPrefix"}, "*"]]}
                                    ]]}
                                ]]
                            }
                        }]
                    }
                }
                ]
            }
        },
        "AppInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [ {
                    "Ref": "AppRole"
                } ]
            }
        },

        "ElasticLoadBalancer" : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "Listeners" : [ {
                    "LoadBalancerPort": "443",
                    "InstancePort": 9000,
                    "Protocol": "HTTPS",
                    "SSLCertificateId" : { "Ref" : "ELBSSLCertificate" }
                }],
                "SecurityGroups" : [ { "Ref" : "LoadBalancerSecurityGroup" } ],
                "Subnets" : { "Ref" : "PublicSubnets" },
                "HealthCheck" : {
                    "Target" : "HTTP:9000/healthcheck",
                    "HealthyThreshold" : "2",
                    "UnhealthyThreshold" : "10",
                    "Interval" : "10",
                    "Timeout" : "5"
                },
                "ConnectionDrainingPolicy": {
                    "Enabled" : "true",
                    "Timeout" : "60"
                },
                "Tags":[
                    {
                        "Key":"Stage",
                        "Value":{
                            "Ref":"Stage"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": "flexible"
                    },
                    {
                        "Key":"App",
                        "Value":"explain-maker"
                    }
                ]
            }
        },
        "LoadBalancerSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Permit incoming HTTPS access on port 443, egress to port 9000",
                "VpcId" : { "Ref" : "VpcId" },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress" : [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9000",
                        "ToPort": "9000",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "SSHSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow SSH access from the office",
                "VpcId": { "Ref": "VpcId" },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "10.0.0.0/8"
                    }
                ]
            }
        },

        "InstanceSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Open up SSH access and enable HTTP access on the configured port",
                "VpcId" : { "Ref" : "VpcId" },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9000",
                        "ToPort": "9000",
                        "CidrIp": {"Ref": "GuardianIP"}
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "9000",
                        "ToPort": "9000",
                        "SourceSecurityGroupId" : { "Ref" : "LoadBalancerSecurityGroup" }
                    }
                ]
            }
        }
    }
}
